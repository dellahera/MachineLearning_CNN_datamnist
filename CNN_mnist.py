# -*- coding: utf-8 -*-
"""MNIST_CNN

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CdKV1zyGhr4aHrXOfZZaLlFXtU8sxElG
"""

import tensorflow as tf
import matplotlib.pyplot as plt 
import seaborn
import random     
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Conv2D, Dropout, Flatten, MaxPooling2D
from keras.callbacks import History

#import dataset mnist
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()
x_train.shape

#Checking the data is correct
class_names = ['0','1','2','3','4','5','6','7','8','9']
plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(x_train[i],  cmap='Greys')
    plt.xlabel(class_names[y_train[i]])
plt.show()

#Normalisasi data train dan test agar data dapat diolah Keras
x_train = x_train.reshape(x_train.shape[0], 28, 28, 1)
x_test = x_test.reshape(x_test.shape[0], 28, 28, 1)
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255

#CNN flow
classifier = Sequential()
classifier.add(Conv2D(28, kernel_size=(3,3), input_shape=(28, 28, 1)))
classifier.add(MaxPooling2D(pool_size=(2, 2)))
classifier.add(Flatten())
classifier.add(Dense(128, activation=tf.nn.relu))
classifier.add(Dropout(0.2))
classifier.add(Dense(10,activation=tf.nn.softmax))

history = History()
classifier.compile(optimizer='adam', 
              loss='sparse_categorical_crossentropy', 
              metrics=['accuracy'])
train_result = classifier.fit(x=x_train,y=y_train, epochs=10,callbacks=[history])

#Grafik loss function
plt.plot(train_result.history['loss'],label='Training')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend()
plt.show()

#Grafik Accuracy
plt.plot(train_result.history['acc'],label='Training')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend()
plt.show()

